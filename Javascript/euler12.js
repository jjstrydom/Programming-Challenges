// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

var math = require('mathjs')

var NdivisorsTarget = 500  // searching for more than 500 divisors
var Ndivisors = 0  // Number of divisors
var t = 0  // triangle element counter
var T = 0  // Triangle number

function findDivisors(value) {  // Assuming positive values larger than 0
// Count the number of divisors of a value
    var maxDivisor = math.sqrt(value)
    var divisors = 2  // A numb with the assumptions stated will always be divisable by 1 and itsself
    if (value % maxDivisor == 0) {  // if the value is divisable by the max divisor exactly, add it
        divisors = divisors + 1
    }
    for (i=2; i < maxDivisor; i++) { // count from 2 (1 is already counted)
        if (value % i == 0) { // find all values that are perfectly divisable
            divisors = divisors + 2  // these will have a perfect result, count both
        }
    }
    return divisors
}

while (Ndivisors <= NdivisorsTarget) {  // Find number of divisors until we find one that is greater than the target
    t = t + 1 // next term in the triangle number
    T = T + t // next triangle number
    Ndivisors = findDivisors(T)  // find number of divisors
}

console.log('Found more than', NdivisorsTarget, 'divisors! Triangle Number of',T , 'with number of divisors equal to', Ndivisors)
